______________________________________________________________
Арифметические операции над числами
операторы: + - сложение, ||/ - кубический корень и т.д.
функции: div(y numeric, x numeric) - целочисленный результат y/x, power(a dp, b dp) - a возводится в степень b и т.д.

______________________________________________________________
Операции над датами. Сравнение дат
Важно помнить, что при вводе значений их нужно заключать в одинарные кавычки, как и текстовые строки!
Есть тип date, рекомендуемый формат выглядит так: yyyy-mm-dd, но можно и так Sep 12, 2016

current_date - функция получения текущей даты
SELECT 
  current_date;

current_time - функция получения текущего вермя
SELECT
  current_time;

Из дат или времени с помощью функции extract():
SELECT 
  extract(
    'mon' 
    FROM 
      date '1999-11-27'
  );

При работе с датами можно использовать арифметические операторы:
select 
  date as "Old date", 
  date + 7 as "New date", 
  date + interval '7 hour' as "New date with time" 
from 
  orders;

Вернет: old date 2019-03-14; new date 2019-03-21; new date with time 2019-03-14 07:00:00


select 
  max(date) - min(date) as "Difference" 
from 
  orders;

Вернет: количество дней

______________________________________________________________
Операции над строками. Оператор LIKE. Поиск строки по шаблону
Строковые типы в SQL обычно представляются с помощью character varying(n) и character(n)
Типы character varying(n) и character(n) имеют псевдонимы varchar(n) и char(n) соответственно
функции: string || string - сложение строку(конкатенация); substring(string [from int] [for int]) - извлекает подстроку

Кроме преобразований строк ещё одной частой операцией является поиск по строкам. 
Можно сравнивать строки с помощью оператора сравнения, но такой поиск слишком ограничен.
Для более гибкого поиска в SQL существует команда LIKE:
строка LIKE шаблон
строка NOT LIKE шаблон

Выражение LIKE возвращает true, если строка соответствует заданному шаблону. 
Для задания шаблона используются символы нижнего подчёркивания (_) для замены любого символа, или процента (%) — для замены последовательности символов. 
Если шаблон не содержит этих символов, то он соответствует строке и LIKE работает как оператор сравнения:
'abc' LIKE 'abc'  -- true
'abc' LIKE 'a%'   -- true
'abc' LIKE '_b_'  -- true
'abc' LIKE 'c'    -- false

При проверке по шаблону LIKE всегда рассматривается вся строка
Поэтому, если нужно найти последовательность символов где-то в середине строки, шаблон должен начинаться и заканчиваться знаками процента (%)
Для того чтобы экранировать символы нижнего подчёркивания и процента, т.е. найти в строке именно их, используется обратная косая черта (/)

______________________________________________________________
У LIKE есть аналог — SIMILAR TO. Синтаксис этой команды очень похож:
строка SIMILAR TO шаблон
строка NOT SIMILAR TO шаблон

Оператор SIMILAR TO работает подобно оператору LIKE, только его шаблоны соответствуют определению регулярных выражений в стандарте SQL. 
У таких выражений более расширенный синтаксис, чем у выражений LIKE
'abc' SIMILAR TO 'abc' -- true
'abc' SIMILAR TO 'a' -- false
'abc' SIMILAR TO '%(b|d)%' -- true
'abc' SIMILAR TO '(b|c)%' -- false

______________________________________________________________
NULL. Использование IS NULL и IS NOT NULL
Если значение не определено, то в таблице хранится NULL
При работе с этим типом данных нельзя пользоваться обычными операторами сравнения, потому что они выдают NULL, а не true или false
Например, 7 = NULL выдаёт NULL. По этой причине для работы с NULL используются предикаты IS [ NOT ]:
выражение IS NULL
выражение IS NOT NULL
Проверка выражение = NULL не будет работать, так как NULL считается не «равным» NULL.
______________________________________________________________
______________________________________________________________
______________________________________________________________
