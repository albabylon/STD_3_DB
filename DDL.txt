DDL
Для изменения структуры базы данных предназначен язык определения данных — DDL

С помощью DDL можно:
-определить структуру новой таблицы и создать её;
-удалить таблицу;
-изменить существующую таблицу;
-создать индекс для ускорения доступа к таблице

_______________________________________________________________________________
CREATE

CREATE TABLE создаёт новую пустую таблицу в текущей базе данных. 
Владельцем таблицы будет пользователь, выполнивший эту команду. 
Важным является то, что имя таблицы должно отличаться от имён других таблиц (или любых других объектов) в этой же схеме

CREATE TABLE films 
(
  id serial PRIMARY KEY, 
  title varchar(40) NOT NULL, 
  produced integer NOT NULL, 
  date_prod date, 
  kind varchar(10), 
  len_min integer
);

При описании столбцов мы задаём ограничения: NOT NULL, PRIMARY KEY.
Определить ограничения можно двумя способами: в виде ограничений таблицы и в виде ограничений столбца.

Записали ограничения для столбца id в виде ограничения таблицы. 
Такой синтаксис тоже допустим, но не совсем удобен. 
Кроме этого, когда вы определяете ограничение на уровне таблицы, то вы можете задавать ему любое имя. 
В примере созданы ограничения с именами films_pk и constr_example. У ограничений NOT NULL нет имён.

Ограничений таблицы:
CREATE TABLE films (
  id serial, 
  title varchar(40) NOT NULL, 
  produced integer NOT NULL, 
  date_prod date, 
  kind varchar(10), 
  len_min integer, 
  CONSTRAINT films_pk PRIMARY KEY (id), 
  CONSTRAINT constr_example CHECK (
    len_min > 100 
    AND title <> ''
  )
);


Значения по умолчанию. 
Это необязательное значение, которое добавляется в столбец в том случае, если в инструкции INSERT для таблицы не указано значение для данного столбца.

Очень важной особенностью является возможность определить вторичный ключ. Это делается с помощью ограничения внешнего ключа.
CREATE TABLE favorite_films 
(
  id SERIAL PRIMARY KEY, user_id INTEGER REFERENCES users, 
  film_id INTEGER REFERENCES films
);

Мы создали таблицу с любимыми фильмами пользователей. Записи в этой таблице ссылаются на таблицы users и films. 
Когда мы указали ссылку на таблицу films и users, то мы не стали указывать столбец (или столбцы, их может быть несколько), по которым будет строится связь. 
В таком случае столбец будет неявно связан с первичным ключом таблицы, на которую он ссылается.

Раз таблицы связаны между собой, то возникает вопрос: а что будет, если значение, на которое мы ссылаемся из другой таблицы будет удалено? 
Например, мы удалили какой-то товар из нашей базы или фильм из примера выше. Возможны несколько вариантов.

Запретить удаление записи, на которую есть ссылка (режим RESTRICT), или удалить все связанные записи (режим CASCADE).

Если кто-то попытается удалить пользователя, на которого есть ссылка из таблицы favorite_films, то это действие будет запрещено. 
При удалении фильма все записи, которые ссылаются на него, будут удалены.
CREATE TABLE favorite_films 
(
  id serial PRIMARY KEY, 
  user_id INTEGER REFERENCES users (id) ON DELETE RESTRICT, 
  film_id INTEGER REFERENCES films ON DELETE CASCADE
)

Кроме удаления и ограничения существуют и другие варианты действий:

NO ACTION выдаёт ошибку, показывающую, что при удалении или изменении записи произойдёт нарушение ограничения внешнего ключа. 
Ошибка произойдёт в момент проверки ограничения. Этот вариант действия подразумевается по умолчанию.
SET NULL и SET DEFAULT. При удалении связанных строк в соответствующие столбцы таблицы, из которой есть ссылка, 
присваиваются значения NULL или значения по умолчанию, соответственно.

_______________________________________________________________________________
DROP
Если таблица вам больше не нужна, то удалить её вы можете с помощью инструкции DROP TABLE
Удалить таблицу может только владелец таблицы, схемы или суперпользователь (обычно администратор базы данных).
Кроме того, что DROP TABLE удаляет саму таблицу, вместе с ней удаляются и все связанные объекты: индексы, ограничения и т.д. 

DROP TABLE films, users;
Это происходит, потому что по умолчанию на удаление таблиц действует режим RESTRICT. 
В этом режиме, если на таблицу есть ссылка из другой таблицы, то удалять её запрещается.
Вы можете указать правило CASCADE.

DROP TABLE IF EXISTS films;


_______________________________________________________________________________
ALTER

Для того чтобы изменить структуру уже существующей таблицы, используется предложение ALTER TABLE

ALTER TABLE 
  products 
ADD 
  COLUMN description text;


Теперь в таблицу products был добавлен новый текстовый столбец description, который должен быть обязательно заполнен (оператор <> значит «НЕ равно»). 
На самом деле здесь можно использовать все конструкции, допустимые в определении столбца в команде CREATE TABLE. 
Помните однако, что значение по умолчанию должно удовлетворять данным ограничениям, чтобы операция ADD выполнилась успешно.

ALTER TABLE 
  products 
ADD 
  COLUMN description text CHECK (description <> '');


Удалить столбец можно так:

ALTER TABLE 
  products 
DROP 
  COLUMN description;


Если вы решили добавить какое-то новое ограничение для столбца, то сделать это можно следующим образом:
ALTER TABLE 
  products 
ADD 
  CHECK (
    name <> 'что-то странное'
  );
ALTER TABLE 
  products 
ADD 
  CONSTRAINT some_name UNIQUE (name);
// имя товара должно быть уникальным
ALTER TABLE 
  example 
ADD 
  FOREIGN KEY (some_id) REFERENCES another_table;
ALTER TABLE 
  products ALTER COLUMN category 
SET 
  NOT NULL;
// теперь категория должна быть указана


Удаление ограничения выполняется похожим образом, но вам необходимо узнать его имя. 
Если вы не присваивали ему имя, это неявно сделала система, и вы должны выяснить его. 
Для того чтобы сделать это, вам необходимо посмотреть метаданные таблицы
ALTER TABLE 
  products ALTER COLUMN product_no 
DROP 
  NOT NULL;


Назначить столбцу новое значение по умолчанию можно так:

ALTER TABLE 
  products ALTER COLUMN price 
SET 
  DEFAULT 100;



Чтобы преобразовать столбец в другой тип данных, используйте команду:

ALTER TABLE products ALTER COLUMN price TYPE numeric(10, 2);



Чтобы переименовать столбец, выполните:

ALTER TABLE products RENAME COLUMN name TO title;
ALTER TABLE products RENAME TO items;