SQL есть возможность обратиться сразу к нескольким таблицам, или обращаться к той же таблице так, 
что одновременно будут обрабатываться разные наборы её строк.

Такие запросы называются соединениями (JOIN). Соединение таблиц может быть внутренним (INNER) или внешним (OUTER), 
причем внешнее соединение может быть левым (LEFT), правым (RIGHT) или полным (FULL).

В качестве иллюстрация к соединениям принято использовать диаграмму Венна.

______________________________________________________________
INNER JOIN

SELECT 
  * 
FROM 
 таблица1 
  INNER JOIN таблица2 ON условие

В результате выполнения такого запроса результаты будут получены (FROM) из двух таблиц, которые соединены по условию, которое идёт после ON. 
Ключевое слово INNER в запросе можно опустить. Условие в этой конструкции определяет условие соединения строк из разных таблиц.

Внутреннее соединение (INNER JOIN) означает, что в результирующий набор попадут только те соединения строк двух таблиц, для которых значение предиката равно TRUE. 
Обычно используется для объединения записей, которые есть и в первой, и во второй таблице, т. е. получения пересечения таблиц.

Например, у нас есть таблица заказов и клиентов. В таблице заказов мы используем идентификаторы клиентов (clients.id). Соединим эти таблицы по этому полю:
select 
  * 
from 
  orders 
  join clients on orders.client_id = clients.id;

Для такого вида соединения не обязательно использовать две разные таблицы: можно соединить таблицу с самой собой
Это удобно, когда в таблице есть ссылка на своё собственное поле. Например, если бы в нашей таблице с клиентами был столбец refer_by, 
который хранил бы в себе идентификатор пользователя, по чьей реферальной программе был приглашен пользователь. 

______________________________________________________________
CROSS JOIN
Этот тип соединения таблиц используется для того, чтобы получить комбинацию всех строк из первой таблицы со всеми строками из второй. 
Такая операция называется декартовым произведением. Декартово произведение двух множеств — это набор всех возможных пар из этих множеств.

select 
  * 
from 
  orders cross 
  join clients;

Основное назначение CROSS JOIN — построение аналитических отчётов. 
______________________________________________________________
OUTER JOIN
Внешнее соединение бывает нескольких видов: FULL, LEFT, RIGHT.

FULL OUTER JOIN
Объединяет записи из обеих таблиц (если условие объединения равно true) и дополняет их всеми записями из обеих таблиц, которые не имеют совпадений. 
Для записей, которые не имеют совпадений из другой таблицы, недостающее поле будет иметь значение NULL.

select 
  * 
from 
  orders full 
  outer join clients on orders.client_id = clients.id;

LEFT OUTER JOIN
В этом случае получаем все записи удовлетворяющие условию объединения, плюс все оставшиеся записи из внешней (первой) таблицы, 
которые не удовлетворяют условию объединения

select 
  * 
from 
  orders 
  left outer join clients on orders.client_id = clients.id;



RIGHT OUTER JOIN
Работает точно так же, как и левое объединение, только в качестве внешней таблицы будет использоваться правая таблица.

select 
  * 
from 
  clients 
  right outer join orders on orders.client_id = clients.id;




LEFT EXCLUSIVE JOIN
В результате в таблице остаются только те записи, которые есть только в левой таблице. Аналогичный запрос вы можете построить и для правого соединения

select 
  * 
from 
  clients 
  left outer join orders on orders.client_id = clients.id 
where 
  orders.id is NULL;
______________________________________________________________
Можно сразу несколько запросов

select 
  sum(pos.amount), 
  prod.name 
from 
  positions as pos 
  join orders as o on pos.order_id = o.id 
  join products as prod on prod.id = pos.product_id 
where 
  o.client_id = 5 
group by 
  prod.id;


______________________________________________________________