Схема — это логический фрагмент базы данных, в котором содержатся: таблицы, индексы и др. В базе данных обязательно есть хотя бы одна схема.

При создании базы данных в ней автоматически создается схема с именем public.
В каждой базе данных может содержаться более одной схемы.
Их имена должны быть уникальными в пределах базы данных, а вот имена таблиц, представлений, последовательностей и др. должны быть уникальными в пределах схемы.
Можно сказать, что схема образует пространство имён

______________________________________________________

ER-модель представляет собой схему, составными элементами которой являются сущности и связи между ними.

Сущность — это реальный либо воображаемый объект, информацию о котором необходимо хранить в базе данных. 
На диаграмме сущности принято изображать либо в виде прямоугольника, либо в виде таблицы.

Связи отображают то, как сущности связаны между собой. 
На формальных диаграммах изображаются в виде ромба, в проектировании баз чаще всего представляются с помощью стрелок. 
Связи могут быть обязательными (линия) или необязательными (пунктирная линия). Кроме того, на диаграмме принято отображать вид связи.

Между сущностями базы могут быть разные связи, например, в заказе указывается идентификатор клиента, который его сделал. 
Связи создаются с помощью внешних ключей (foreign key).

!!Один к одному - каждая сущность A может быть ассоциирована с 0 или 1 сущностью B.
Самый простой пример из реальной жизни — люди и их паспорта.
Можно реализовать: 
В одной таблице или В отдельных таблицах (не всегда хорошая практика)

!!Один ко многим или многие к одному - такая связь образуется, когда одна запись в таблице А может быть связана с 0, 1 или множеством записей в таблице B.
Примером такой связи могут быть люди и их номера телефонов
Ещё одним примером могут быть участники реферальной программы. Один человек может пригласить множество других людей, но у каждого человека будет не больше, чем один пригласивший его.

!!Связь многие ко многим - такое отношение возникает, когда множеству записей из одной таблицы могут соответствовать множественные записи из другой.
Примером такой связи может служить университет: у каждого студента есть множество преподавателей, и наоборот. Связь многие-ко-многим создается с помощью трёх таблиц. 
Две «таблицы–источника» и одна соединительная таблица. По сути, связь многие-ко-многим состоит из двух связей один-ко-многим.

Еще пример - человек и дом (любой тип недвижимости). У одного человека может быть несколько квартир, а у одной квартиры может быть несколько владельцев.
Для хранения информации о том, какая собственность кому принадлежит, используется промежуточная таблица ownerships

!!!!!!Если вы не можете понять, какую именно связь выбрать, то попробуйте задать себе пару вопросов:
Сколько объектов из B могут относиться к объекту из A?
Сколько объектов из A могут относиться к объекту из B?


_____________________________________________________
Создание таблиц в БД PostgresSQL

CREATE TABLE clients (
  id SERIAL PRIMARY KEY, 
  name character varying(200) NOT NULL, 
  phone character varying(30) NOT NULL, 
  email character varying(200) NOT NULL
);

- Обратите внимание на тип этой колонки — SERIAL - специальный тип данных, который позволяет генерировать последовательность чисел.

- В таблице в результирующем столбце хранится обычное число, а создаётся оно с помощью специального объекта SEQUENCE, который эти числа генерирует. 
У этого объекта есть имя, которое для таблицы clients будет clients_id_seq.

- NOT NULL. Это значит, что при заполнении значения там всегда должны быть указаны какие-то значения.

- Для некоторых столбцов можно устанавливать значение по умолчанию. В таблице это можно отобразить с помощью ключевого слова DEFAULT
CREATE TABLE apples...color character varying(30) DEFAULT "red", 

- CHECK - для ограничения ввода
В данном случае мы использовали ограничение на уровне атрибута:
CREATE TABLE apples (
  ...color character CHECK (
    color in (
      'red', 
      'green')), -- зелёные или красные
weight numeric CHECK (weight >= 150 OR weight <= 300) -- вес от 150 до 300
...
);
Пример синтаксиса ограничения на уровне таблицы:
CREATE TABLE apples (
  ...weight numeric CHECK (
    weight >= 150 
    AND weight <= 300
  )...
);

- REFERENCES - идентификатор клиента в качестве вторичного ключа
CREATE TABLE apples (
  weight numeric, 
  color character, 
  tree_id REFERENCES trees (id) -- внешний ключ, ссылка на идентификатор определенного дерева
);

- CONSTRAINT - можно задать доп свойства к колонке:
CONSTRAINT positions_pk PRIMARY KEY (id), 
CONSTRAINT order_fk FOREIGN KEY(order_id) REFERENCES orders(id), 
CONSTRAINT product_fk FOREIGN KEY(product_id) REFERENCES products(id)


- delete from clients; -- удаляет все данные из таблицы clients
- ALTER SEQUENCE clients_id_seq RESTART WITH 1; -- Последовательность снова начинается с 1
