Строки в таблицах хранятся в неупорядоченном виде
Каждый раз, когда вы выполняете запрос на выборку, обновление или удаление данных, 
СУБД должна отыскать нужные строки.

Просмотр больших таблиц, содержащих миллионы строк, может занять минуты и даже часы. 
Для ускорения этого поиска создается индекс, с чем мы с вами и будем разбираться в этом юните.

Индекс — это специальная структура данных.

Внутри индекса данные уже хранятся в упорядоченном виде, что значительно ускоряет поиск. 
Индекс строится следующим образом: на основе данных, содержащихся в конкретной строке таблицы, 
формируется запись индекса, которая соответствует этой строке. 
Такие записи могут формироваться на основе значений одного или нескольких полей таблицы. 
Запись индекса также содержит в себе указатель на строку, которой она соответствует.

Каждый раз, когда осуществляется поиск по базе данных, специальная подсистема СУБД — планировщик — проверяет, имеется ли для этой таблицы индекс.

При этом индекс должен быть создан на основе тех же столбцов, что указаны, например, в условии предложения WHERE, т.е. тех, по которым мы осуществляем поиск. 
Если такой индекс существует, то планировщик сначала проверяет, есть ли смысл использовать индекс в этом конкретном случае.

Если планировщик решает, что для выполнения запроса стоит использовать индекс, то выполняется поиск необходимых значений в индексе. 
Если значения в нем найдены, производится обращение к таблице с использованием указателей, которые хранятся в записях индекса.

Переход от индекса к строке таблицы также происходит довольно быстро, 
поскольку в индексе содержится информация о том, где именно на диске располагается эта строка.

Раз индексы так удобны и позволяют значительно укорить выполнения запросов, то почему бы не использовать их для всех столбцов таблицы? 
Проблема в том, что на создание и поддержание индексов в актуальном состоянии требуются некоторые накладные расходы



________________________________________________________________________________
Внутреннее устройство индексов

В базе данных могут быть индексы разных типов. 
Чаще всего используются индексы, которые реализованы на основе структуры данных, которая называется B-дерево.

Деревья — это специальные структуры данных, используемые для поиска

Узел а под ним слева меньше число справа больше число

Деревья были бинарными, это означает, что у каждого узла, кроме листовых (конечных) было лишь по 2 потомка. 
Обычно же в базах данных деревья сильно ветвисты, то есть каждый узел содержит сразу много (сотни) потомков. 
За счет этого глубина B-деревьев получается небольшой: на практике до 4–5 для очень больших таблиц. 
Соответственно, поиск очень ускоряется.



________________________________________________________________________________
Создание индексов

Можете самостоятельно создавать индексы, но в некоторых случаях база данных делает это за вас

Для первичных ключей всегда создаются индексы. Это делается, чтобы гарантировать уникальность первичных ключей в таблице.
Подобный индекс создаётся также для всех полей, у которых задано ограничение уникальности с помощью предложение UNIQUE.

Если вы создаёте индекс, нужно учитывать предполагаемую долю строк таблицы (селективность), 
которые будут извлечены при выполнении типичных запросов, в которых будет использоваться индекс. 
то значит, что вам нужно предположить, сколько строк будут возвращать наиболее частые запросы к данной таблице. 
Если таких строк очень много, то говорят, что селективность — низкая. 


Индексы более полезны, когда из таблицы выбирается лишь небольшая доля строк, т. е. при высокой селективности выборки.!!!

Создадим свои собственные индексы:
CREATE INDEX new_index ON clients (name, phone);

В команде создания индекса можно использовать не только имена столбцов, но также функции и выражения:
CREATE UNIQUE INDEX email_unique_key ON clients (lower(email));

Можете задавать индекс, который будет работать не для всех записей в таблице, а только для некоторых - индекс называется частичным
CREATE INDEX products_index ON products(name) WHERE price < 1000;

Индексы также могут применяться для сортировки строк.
По умолчанию элементы индекса хранятся в порядке возрастания, при этом значения NULL идут в конце.

Для того чтобы задать порядок, используется следующий синтаксис:
CREATE INDEX asc_index ON products (category NULLS FIRST);
CREATE INDEX asc_index ON products (category DESC NULLS LAST);

Как было отмечено ранее, индексы могут улучшить производительность системы, 
но требуют дополнительных расходов на поддержание их в актуальном состоянии. 
Иногда расходы на поддержание их в актуальном состоянии оказываются больше, чем выгода в производительности системы от использования индекса, 
тогда введение индекса будет только уменьшать скорость работы.


Чтобы этого избежать, прежде чем добавлять индексы в свою базу данных, подумайте о следующем:
1 Для таблиц, которые часто обновляются, используйте как можно меньше индексов. 
Если же таблица содержит большое количество данных, и они меняются редко, тогда смело используйте индексы. 
Для одной таблицы вы можете сделать любое число индексов, но для небольших таблиц прирост производительности может быть неощутим или его не будет вовсе.

2 В общем случае, чем больше у вас дубликатов в столбце, тем хуже работает индекс. 
Поэтому по возможности старайтесь использовать уникальный индекс.

3 Для составного индекса учитывайте порядок столбцов в индексе. Столбцы, которые используются в выражениях WHERE, должны быть в индексе первыми. 
Последующие столбцы лучше перечислять с учетом уникальности их значений.