
Cамым главным является то, что спроектированная схема должна удовлетворять требованиям бизнеса, 
т.е. решать какую-то конкретную задачу, а не строго соответствовать каким-то формальным правилам.
С другой стороны, существуют некоторые правила, которые лучше соблюдать, чтобы облегчить разработку и поддержание БД.

Нормализацией баз данных называется процесс приведения её таблиц к нормальным формам (NF). 
Всего таких форм существует 8, но чаще всего используются первые три.

______________________________________________________________________________________________
Первая нормальная форма (1НФ)

Первая нормальная форма выполняется, если все значения колонок таблицы атомарны - это значит, что в каждой колонке хранится неделимый кусочек информации. 
(если в колонке хранится идентификатор продукта, то это атомарное значение, а если список таких идентификаторов — нет)

Номер телефона в таблице с клиентами мы храним как строку, а можно разбить его на код страны, оператора и т.д. 
То, с какой точностью вы будете делить какое-то значение, зависит только от того, какую именно задачу вы решаете. 
Для интернет-магазина, например, разбивать номер телефона на составляющие кажется излишним.

Правила:
- Строки таблиц не должны зависеть друг от друга, т.е. первая запись не должна влиять на вторую и наоборот, вторая на третью
- Аналогичная ситуация со столбцами записей. Их порядок не должен влиять на понимание информации.
- Каждая строка должна быть уникальна, поэтому для неё определяется первичный ключ, состоящий из одного или нескольких полей (составной ключ).

______________________________________________________________________________________________
Вторая нормальная форма (2НФ)

Для второй нормальной формы выполняются все требования 1НФ, 
и при этом все атрибуты (значения колонок) целиком зависят от составного ключа и не зависят ни от какой его части


______________________________________________________________________________________________
Третья  нормальная форма (3НФ)

Третья нормальная форма означает, что выполнены требования 2НФ и между атрибутами отношения нет транзитивных зависимостей

Фактически в третьей нормальной форме каждый неключевой атрибут зависит от ключа, причем от всего ключа целиком и ни от чего другого, кроме как от ключа. 


______________________________________________________________________________________________
Денормализация

Иногда возникает необходимость намеренно нарушить нормализацию в базе данных.
В некоторых случаях это позволяет повысить производительность, т.е. уменьшить время работы запросов к базе. 
Для того чтобы это сделать, в таблицы добавляют избыточные данные. 
Это может быть полезно, если вам часто необходимо генерировать какие-то сложные отчёты, которые делают выборку из множества больших таблиц.

Важно отметить, что сначала вы нормализуете базу, а только потом денормализуете. 

В каких случаях ещё полезна денормализация?
-Повышение производительности запросов
-Ускорение создания отчетов.
-Предварительные вычисления часто запрашиваемых значений. 
Лучше держать наиболее часто запрашиваемые значения наготове для регулярных расчетов, а не создавать их заново, генерируя их каждый раз в реальном времени.
-Сохранение исторических данных. 
Данные меняются с течением времени, но может быть нужно сохранять значения, которые были введены в момент создания записи. 
Например, могут измениться имя и фамилия клиента или другие данные о его месте жительства.

Самое главное — денормализация используется только тогда, когда вам необходимо ускорить работу базы.

Недостатки и пробемы денормализации:
-Из-за дублирования увеличивается размер базы данных.
-Могут появляться аномалии данных. Если у вас есть колонки-копии, то значения в них необходимо поддерживать в актуальном состоянии.
-Замедление других операций. Из-за увеличения количества данных могут замедлиться операции вставки и изменения данных.
-Для того чтобы провести денормализацию, вам придётся написать код, документацию к нему и провести эксперименты.
