namespace RelationModel
{
    public class RelationModel
    {
        // Реляционная база данных — это набор данных с предопределенными связями между ними.
        // Эти данные представлены в виде таблиц, состоящих из столбцов и строк.
        // В каждом столбце таблицы хранится определенный тип данных, в каждой ячейке — значение.
        // Каждая строка в такой таблице предоставляет набор значений, относящихся к одному объекту

        // Реляционная модель предполагает логическую структуру данных: таблицы, представления и индексы
        // Соответственно, под логической структурой понимаются таблицы, под физической — файлы
        // Такое разделение дает возможность администраторам управлять физической системой хранения, не меняя данных, содержащихся в логической структуре

        // Разработчики уяснили, что таблицы являются ключевым преимуществом реляционных баз данных,
        // так как обеспечивают интуитивно понятный, эффективный и гибкий способ хранения структурированной информации и получения к ней доступа.

        // Также мы можем отслеживать добавляемые данные для обеспечения структурной целостности.
        // Например, атрибут UNIQUE говорит о том, что значения в столбце не могут повторяться.





        // MSSQL
        // sqlcmd -Q "CREATE DATABASE testdb" - создание БД
        // sqlcmd -S .\SQLEXPRESS - если ошибка и MSSQL SERVER установлен более 1 раза

        // sqlcmd -d testdb -Q "CREATE TABLE testtable (id INT IDENTITY PRIMARY KEY,title VARCHAR(255) NOT NULL,description TEXT)"
        // Где:
        //id — это поле, в котором мы храним уникальный идентификатор для каждой созданной строки в таблице;
        //INT говорит о том, что этот идентификатор — число;
        //IDENTITY — то, что с каждым новым добавлением новой строки он будет возрастать на 1;
        //PRIMARY KEY показывает, что это поле — первичный ключ, но об этом в следующем юните;
        //title — собственно название второго столбца;
        //VARCHAR(255) значит, что данное поле состоит из символов не более 255 штук;
        //NOT NULL — поле должно быть обязательно заполнено при вставке в таблицу, иначе запрос не пройдёт;
        //description — название третьего столбца;
        //столбец TEXT в большинстве случаев может рассматриваться как столбец VARCHAR неограниченного размера.

        // Добавление данных:
        // sqlcmd -d testdb -Q "insert testtable(title,description) VALUES ('test1' ,'test2');"
        // sqlcmd -d testdb -Q "insert testtable(title,description) VALUES ('test1111' ,'test22222');"

        // Смотрим данные:
        // sqlcmd -d testdb -Q "select * from testtable"

        // UNIQUE гарантирует, что все значения в столбце различаются
        // Уникальные и первичные ограничения предоставляют гарантию уникальности для столбца или набора столбцов.
        // Ограничение первичного ключа автоматически имеет уникальное ограничение.
        // Однако, можно иметь много уникальных ограничений для каждой таблицы, но только одно ограничение первичного ключа для каждой таблицы.

        // sqlcmd -d testdb -Q "CREATE TABLE Persons (ID int NOT NULL,LastName varchar(255) NOT NULL,FirstName varchar(255),Age int,UNIQUE (ID));"


        // UPDATE - меняет данные в таблице
        // SET - какие именно столбцы модифицировать и какие значения
        // WHERE - какие строки подлежат измененнию

        // sqlcmd -d testdb -Q "UPDATE testtable SET title='REALTEST' where id =2;"





        // ПЕРВИЧНЫЙ КЛЮЧ
        // Если в таблице каждая строка однозначно определяется одним или несколькими уникальными значениями,
        // которые принимают её ячейки из определенного подмножества столбцов, то говорят, что у таблицы есть первичный ключ.
        // Первичный ключ — это подмножество столбцов, которое уникально идентифицирует строку.
        // Часто в качестве первичного ключа берут просто ID объекта, например, ID пользователя или ID покупки.

        // В MSSQL первичный ключ — это одно поле или несколько полей, которые определяют уникальность записи
        // Ячейки, являющиеся частью первичного ключа, не могут содержать значение NULL
        // Кстати, в каждой таблице может быть только один первичный ключ

        // Задать первичный ключ:
        // 1. Первый способ (поле ID):
        // sqlcmd -d testdb -Q "CREATE TABLE developers(ID INT NOT NULL IDENTITY PRIMARY KEY, NAME VARCHAR (100) NOT NULL, SPECIALTY VARCHAR(100) NOT NULL, SALARY INT NOT NULL);"
        // 2. Второй способ (поле ID):
        // sqlcmd -d testdb -Q "CREATE TABLE developers(ID INT NOT NULL, NAME VARCHAR (100) NOT NULL, SPECIALTY VARCHAR(100) NOT NULL, SALARY INT NOT NULL, PRIMARY KEY (ID));"

        // Для применения в существующей таблице:
        // sqlcmd -d testdb -Q "ALTER TABLE developers ADD PRIMARY KEY (ID);"
    }
}
