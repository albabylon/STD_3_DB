
Транзакции — это одно из самых важных понятий в СУБД и программировании в целом. 
Суть транзакции в том, что она объединяет последовательность действий в одну операцию «всё или ничего».
Это значит, что все команды, которые выполняются в рамках одной транзакции, выполняются до конца, или ни одна инструкция не выполняется. 

У транзакций есть свойства, которыми вы можете управлять: 

-уровень изоляции транзакции - пределяет, какие данные может видеть транзакция, когда параллельно с ней выполняются другие транзакции:
1 READ COMMITTED - В текущей транзакции видны только те строки, которые были зафиксированы до начала выполнения транзакции. 
Этот уровень устанавливается по умолчанию.

2 REPEATABLE READ. Уровень, при котором читающая транзакция «не видит» изменения данных, которые были ею ранее прочитаны.

3 SERIALIZABLE. Самый высокий уровень изолированности: транзакции полностью изолируются друг от друга, каждая выполняется так, 
как будто параллельных транзакций не существует.

4 READ UNCOMMITTED. Низший уровень изоляции. Если несколько параллельных транзакций пытаются изменять одну и ту же строку таблицы, 
то в окончательном варианте строка будет иметь значение, определенное всем набором успешно выполненных транзакций. В Postgres этот уровень не реализован.

-режим доступа транзакции - он определяет, будет ли транзакция только читать данные или будет и читать, и писать. 
По умолчанию подразумевается чтение/запись. 
Если транзакции разрешено только чтение, то запрещено выполнение следующих команд: INSERT, UPDATE, DELETE, CREATE и т.д. 
Для того, чтобы поменять эти характеристики, у транзакции используется следующая конструкция:
SET TRANSACTION ISOLATION LEVEL SERIALIZABLE READ WRITE;


-------------------------------------------------------------------------------------------------
ACID - аббревиатура, обычно используемая для обозначения четырех характеристик транзакции.
Каждая транзакция удовлетворяет следующим правилам:

Atomicity - либо успешно выполняются все операции транзакции, либо не выполняется ни одна из них

Consistency - транзакция должна переводить базу данных из одного согласованного состояния в другое
(если деньги были списаны с одного счёта, то они обязательно должны быть зачислены на другой счёт)

Isolation - каждая транзакция должна выполняться сама по себе, без взаимодействия с другими транзакциями
(если транзакция началась и работает со счетами Вани и Маши, то другая транзакция не может обратиться к этим счетам и начать менять их.)

Durability - по завершении транзакции все внесенные ею изменения должны быть сохранены
(даже если по окончании транзакции произойдет аппаратный или программный сбой, то после восстановления эти данные должны быть в базе.)


-------------------------------------------------------------------------------------------------
Служебные слова BEGIN, END, COMMIT, ROLLBACK

BEGIN начинает блок транзакции

COMMIT фиксирует текущую транзакцию - все изменения, произведённые транзакцией, становятся видимыми для других и гарантированно сохранятся в случае сбоя

ROLLBACK вы можете откатить текущую транзакцию


Синтаксис для выполнения транзакции выглядит следующим образом:

BEGIN;
--Списываем деньги со счёта Маши 
UPDATE 
  accounts 
SET 
  balance = balance - 100.00 
WHERE 
  name = 'Маша';
--Уменьшаем количество денег в Машином банке
UPDATE 
  bank_balance 
SET 
  balance = balance - 100.00 
WHERE 
  name = (
    SELECT 
      bank_name 
    FROM 
      accounts 
    WHERE 
      name = 'Маша'
  );
--Зачисляем деньги на счёт Ване
UPDATE 
  accounts 
SET 
  balance = balance + 100.00 
WHERE 
  name = 'Ваня';
--Увеличиваем количество денег в банке Вани
UPDATE 
  bank_balance 
SET 
  balance = balance + 100.00 
WHERE 
  name = (
    SELECT 
      bank_name 
    FROM 
      accounts 
    WHERE 
      name = 'Ваня'
  );
COMMIT;


BEGIN;
--Списываем деньги со счёта Маши 
UPDATE 
  accounts 
SET 
  balance = balance - 100.00 
WHERE 
  name = 'Маша';
ROLLBACK;


По умолчанию транзакции выполняются в режиме «autocommit» (автофиксация).

В таком режиме каждый оператор выполняется в своей отдельной транзакции, которая неявно фиксируется в конце оператора, 
если оператор был выполнен успешно или откатывается, если произошла ошибка. 
Такое поведение (каждый оператор выполняется в своей транзакции) сказывается на производительности всей базы, 
потому что для запуска/фиксации транзакции производится много операций, нагружающих процессор и диск.

По этой причине для больших скриптов стоит выполнять сразу несколько команд в одной транзакции. 
Кроме того, выполнение нескольких операторов в одной транзакции позволяет обеспечить целостность при внесении серии связанных изменений.

-------------------------------------------------------------------------------------------------
Точки сохранения - позволяют выборочно отменять некоторые части транзакции и фиксировать все остальные.

Представьте ситуацию, что у вас есть лимит на покупки для какого-то клиента. 
Если добавление новой строки в заказ приводит к превышению лимита кредита клиента, 
то приложение может выполнить откат к точке непосредственно перед добавлением этой строки. 
Откат должен отменить строку, которая вызвала проблемы, предупредить клиента о том, 
что лимит превышен, и позволить продолжить работу — например, добавить к покупке менее дорогой товар.

Для того чтобы осуществить такой откат к нужному месту, и используются точки сохранения.

Определив точку сохранения с помощью оператора SAVEPOINT, при необходимости вы можете вернуться к ней с помощью команды ROLLBACK TO

BEGIN;
UPDATE 
  accounts 
SET 
  balance = balance - 100.00 
WHERE 
  name = 'Маша';
SAVEPOINT my_savepoint;
UPDATE 
  accounts 
SET 
  balance = balance + 100.00 
WHERE 
  name = 'Ваня';
-- ошибочное действие, откатить его и использовать счёт Лёши
ROLLBACK TO my_savepoint;
UPDATE 
  accounts 
SET 
  balance = balance + 100.00 
WHERE 
  name = 'Лёша';
COMMIT;

Важным является то, что когда вы возвращаетесь к точке сохранения, она продолжает существовать, так что вы можете откатываться к ней несколько раз.


С другой стороны, если вы уверены, что вам не придётся откатываться к определённой точке сохранения, её можно удалить, чтобы система высвободила ресурсы. 
Помните, что при удалении или откате к точке сохранения все точки сохранения, определённые после неё, автоматически уничтожаются.

BEGIN;
INSERT INTO table1 
VALUES 
  (3);
SAVEPOINT my_savepoint;
INSERT INTO table1 
VALUES 
  (4);
RELEASE SAVEPOINT my_savepoint;
-- удаление точки сохранения COMMIT;

-------------------------------------------------------------------------------------------------
Журнал транзакций

Для того чтобы управлять транзакциями, используется журнал транзакций
Одна копия представляет собой строку до изменения, а другая — после изменения.

СУБД изменяет физическую строку на диске только после того, как в журнале будет сделана соответствующая запись.
Затем, если пользователь выполняет инструкцию COMMIT, в журнале отмечается конец транзакции. 
Если же пользователь выполняет инструкцию ROLLBACK, СУБД обращается к журналу и извлекает из него исходные копии строк, измененных во время транзакции. 
Используя эти копии, СУБД возвращает строки в прежнее состояние и таким образом отменяет изменения, внесенные в базу данных в ходе транзакции.

